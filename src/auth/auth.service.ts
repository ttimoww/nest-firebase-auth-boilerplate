import { Injectable, Inject, UnauthorizedException } from '@nestjs/common';

// Firebase
import { CollectionReference, Timestamp } from '@google-cloud/firestore';
import * as admin from 'firebase-admin';
import { DecodedIdToken } from 'firebase-admin/lib/auth/token-verifier';

// Documents
import { UserDocument } from 'src/user/user.document';

@Injectable()
export class AuthService {

    constructor(
        @Inject(UserDocument.collectionName)
        private userCollection: CollectionReference<UserDocument>,
    ) {}

    /**
     * Validates the User session with Firebase Authentication
     * @param idToken Auth Bearer Token
     */
    async validateUserSession(idToken: string): Promise<DecodedIdToken> {
        const firebaseUser = await admin.auth().verifyIdToken(idToken)  
            .catch(() => {
                throw new UnauthorizedException();
            });    
        if (!firebaseUser) throw new UnauthorizedException();
        return firebaseUser;
    }

    /**
     * Get the User from Firestore, if User does not exist it creates one
     * @param uid User Id (generated by Firebase auth)
     */
    async getUser(uid: string): Promise<UserDocument> {
        const userRef = this.userCollection.doc(uid);
        let userDoc = await userRef.get();
        if (!userDoc.exists) {
            await userRef.set({
                uid,
                createdAt: Timestamp.fromDate(new Date())
            });
            userDoc = await userRef.get();
        }
        return userDoc.data();
    }
}
